---
description:
globs:
alwaysApply: true
---
OpenManus 项目规则
1. 项目结构规范
1.1 目录结构
后端核心代码（Core）位于根目录
前端应用（App）位于 web/ 目录
工作区文件存储在 workspace/ 目录
配置文件存储在 config/ 目录
示例代码位于 examples/ 目录
测试代码位于 tests/ 目录
部署相关脚本位于 scripts/ 目录
文档文件位于 docs/ 目录
1.2 命名规范
文件和目录使用小写字母，多个单词用下划线连接（snake_case）
Python 类名使用大驼峰命名法（PascalCase）
Python 函数和变量使用小写字母，多个单词用下划线连接（snake_case）
JavaScript/TypeScript 组件使用大驼峰命名法（PascalCase）
JavaScript/TypeScript 函数和变量使用小驼峰命名法（camelCase）
常量使用全大写字母，多个单词用下划线连接（UPPER_SNAKE_CASE）
2. 代码风格规范
2.1 Python 代码规范
使用 Black 自动格式化代码
使用 isort 自动整理导入（配置为兼容 Black 格式）
使用 autoflake 移除未使用的导入和变量
导入语句后保留两个空行
使用类型注解提高代码可读性
使用 docstring 注释类和函数（使用三重引号）
行长度不超过 88 字符（Black 默认）
使用 4 个空格进行缩进
不使用尾随空格
2.2 JavaScript/TypeScript 代码规范
使用 ESLint 和 Prettier 进行代码格式化
使用单引号替代双引号
在语句末尾使用分号
缩进使用 2 个空格
行长度不超过 150 字符
使用 TypeScript 类型定义
多行对象或数组末尾要有逗号
不使用尾随空格
2.3 CSS/SCSS 规范
使用 Tailwind CSS 作为样式框架
使用 prettier-plugin-tailwindcss 格式化 Tailwind 类名顺序
遵循项目预设的设计系统和样式变量
3. 版本控制规范
3.1 Git 规范
使用.gitignore忽略不需要版本控制的文件
使用.gitattributes设置文件行尾和二进制处理
使用预提交钩子（pre-commit hooks）自动检查代码质量
大型媒体文件使用 Git LFS 管理
3.2 分支管理
使用 GitHub Flow 工作流
主分支（main/master）应保持稳定可发布状态
功能开发在特性分支（feature/xxx）上进行
修复错误在修复分支（fix/xxx）上进行
通过 Pull Request 将代码合并到主分支
3.3 提交信息规范
使用规范化的提交信息格式
格式：<类型>(<范围>): <描述>
类型包括：feat、fix、docs、style、refactor、perf、test、chore 等
提交信息使用中文或英文，保持一致性
4. 环境配置规范
4.1 Python 环境
使用 uv 管理 Python 依赖
Python 版本：3.12
使用虚拟环境隔离依赖
在 requirements.txt 中锁定依赖版本
4.2 Node.js 环境
Node.js 版本：v20.19.0 或更高
使用 npm 管理前端依赖
锁定依赖版本（package-lock.json）
4.3 Docker 环境
使用 Docker 和 Docker Compose 管理容器
后端服务使用 openmanus-core 镜像
数据库使用 PostgreSQL 容器
使用卷挂载持久化数据和配置
5. 文档规范
5.1 代码注释
代码中的注释应简明扼要，解释"为什么"而不是"是什么"
复杂逻辑应有详细注释
公共 API 和关键函数必须有 docstring 文档
支持中英双语注释，保持一致性
5.2 项目文档
README.md 提供项目概述、特点和安装指南
支持中英双语文档（README.md 和 README-en.md）
遵循 Markdown 格式规范
使用表格和列表增强可读性
6. 测试规范
6.1 后端测试
使用 pytest 进行单元测试和集成测试
测试文件命名格式：test_*.py
保持测试覆盖率在合理水平
使用 playwright 进行浏览器自动化测试
6.2 前端测试
单元测试使用适当的测试框架
组件测试关注组件的独立功能
集成测试验证组件间交互
端到端测试验证完整用户流程
7. 安全规范
7.1 身份认证
使用公私钥对进行安全认证
敏感信息（如密钥、访问令牌）通过环境变量配置
避免在代码中硬编码敏感信息
7.2 数据安全
对用户输入进行验证和清洗
所有外部 API 调用应有错误处理和超时设置
遵循最小权限原则
8. 国际化和本地化
8.1 语言支持
支持中英双语界面
文本内容存储在语言文件中，便于翻译和维护
错误消息和提示信息应支持多语言
8.2 日期和时间
使用 ISO 格式存储日期和时间
前端显示根据用户语言偏好进行本地化
9. 贡献指南
9.1 新功能开发
提前讨论新功能的设计和实现方案
遵循现有的代码风格和架构模式
提供充分的测试覆盖
更新相关文档
9.2 问题报告
使用 GitHub Issues 报告问题
提供清晰的问题描述和复现步骤
如可能，提供屏幕截图或错误日志
标记问题的优先级和严重程度
10. 发布和部署
10.1 版本管理
遵循语义化版本（Semantic Versioning）规范
使用标签（tag）标记版本发布
维护更新日志（CHANGELOG）记录变更
10.2 部署流程
使用 Docker 容器进行部署
提供详细的部署文档和脚本

支持不同环境（开发、测试、生产）的配置

